// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor.proto

package smilyk.sensor.model;

public final class SensorProto {
  private SensorProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SensorsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:model.Sensors)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    java.util.List<smilyk.sensor.model.SensorProto.Sensor> 
        getSensorList();
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    smilyk.sensor.model.SensorProto.Sensor getSensor(int index);
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    int getSensorCount();
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    java.util.List<? extends smilyk.sensor.model.SensorProto.SensorOrBuilder> 
        getSensorOrBuilderList();
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    smilyk.sensor.model.SensorProto.SensorOrBuilder getSensorOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code model.Sensors}
   */
  public static final class Sensors extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:model.Sensors)
      SensorsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sensors.newBuilder() to construct.
    private Sensors(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sensors() {
      sensor_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Sensors();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sensors(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                sensor_ = new java.util.ArrayList<smilyk.sensor.model.SensorProto.Sensor>();
                mutable_bitField0_ |= 0x00000001;
              }
              sensor_.add(
                  input.readMessage(smilyk.sensor.model.SensorProto.Sensor.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          sensor_ = java.util.Collections.unmodifiableList(sensor_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smilyk.sensor.model.SensorProto.internal_static_model_Sensors_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smilyk.sensor.model.SensorProto.internal_static_model_Sensors_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smilyk.sensor.model.SensorProto.Sensors.class, smilyk.sensor.model.SensorProto.Sensors.Builder.class);
    }

    public static final int SENSOR_FIELD_NUMBER = 1;
    private java.util.List<smilyk.sensor.model.SensorProto.Sensor> sensor_;
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    @java.lang.Override
    public java.util.List<smilyk.sensor.model.SensorProto.Sensor> getSensorList() {
      return sensor_;
    }
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends smilyk.sensor.model.SensorProto.SensorOrBuilder> 
        getSensorOrBuilderList() {
      return sensor_;
    }
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    @java.lang.Override
    public int getSensorCount() {
      return sensor_.size();
    }
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    @java.lang.Override
    public smilyk.sensor.model.SensorProto.Sensor getSensor(int index) {
      return sensor_.get(index);
    }
    /**
     * <code>repeated .model.Sensor sensor = 1;</code>
     */
    @java.lang.Override
    public smilyk.sensor.model.SensorProto.SensorOrBuilder getSensorOrBuilder(
        int index) {
      return sensor_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < sensor_.size(); i++) {
        output.writeMessage(1, sensor_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < sensor_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, sensor_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smilyk.sensor.model.SensorProto.Sensors)) {
        return super.equals(obj);
      }
      smilyk.sensor.model.SensorProto.Sensors other = (smilyk.sensor.model.SensorProto.Sensors) obj;

      if (!getSensorList()
          .equals(other.getSensorList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSensorCount() > 0) {
        hash = (37 * hash) + SENSOR_FIELD_NUMBER;
        hash = (53 * hash) + getSensorList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smilyk.sensor.model.SensorProto.Sensors prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code model.Sensors}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:model.Sensors)
        smilyk.sensor.model.SensorProto.SensorsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensors_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensors_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smilyk.sensor.model.SensorProto.Sensors.class, smilyk.sensor.model.SensorProto.Sensors.Builder.class);
      }

      // Construct using smilyk.sensor.model.SensorProto.Sensors.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSensorFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (sensorBuilder_ == null) {
          sensor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          sensorBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensors_descriptor;
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensors getDefaultInstanceForType() {
        return smilyk.sensor.model.SensorProto.Sensors.getDefaultInstance();
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensors build() {
        smilyk.sensor.model.SensorProto.Sensors result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensors buildPartial() {
        smilyk.sensor.model.SensorProto.Sensors result = new smilyk.sensor.model.SensorProto.Sensors(this);
        int from_bitField0_ = bitField0_;
        if (sensorBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            sensor_ = java.util.Collections.unmodifiableList(sensor_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.sensor_ = sensor_;
        } else {
          result.sensor_ = sensorBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smilyk.sensor.model.SensorProto.Sensors) {
          return mergeFrom((smilyk.sensor.model.SensorProto.Sensors)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smilyk.sensor.model.SensorProto.Sensors other) {
        if (other == smilyk.sensor.model.SensorProto.Sensors.getDefaultInstance()) return this;
        if (sensorBuilder_ == null) {
          if (!other.sensor_.isEmpty()) {
            if (sensor_.isEmpty()) {
              sensor_ = other.sensor_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSensorIsMutable();
              sensor_.addAll(other.sensor_);
            }
            onChanged();
          }
        } else {
          if (!other.sensor_.isEmpty()) {
            if (sensorBuilder_.isEmpty()) {
              sensorBuilder_.dispose();
              sensorBuilder_ = null;
              sensor_ = other.sensor_;
              bitField0_ = (bitField0_ & ~0x00000001);
              sensorBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSensorFieldBuilder() : null;
            } else {
              sensorBuilder_.addAllMessages(other.sensor_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smilyk.sensor.model.SensorProto.Sensors parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smilyk.sensor.model.SensorProto.Sensors) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<smilyk.sensor.model.SensorProto.Sensor> sensor_ =
        java.util.Collections.emptyList();
      private void ensureSensorIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          sensor_ = new java.util.ArrayList<smilyk.sensor.model.SensorProto.Sensor>(sensor_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          smilyk.sensor.model.SensorProto.Sensor, smilyk.sensor.model.SensorProto.Sensor.Builder, smilyk.sensor.model.SensorProto.SensorOrBuilder> sensorBuilder_;

      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public java.util.List<smilyk.sensor.model.SensorProto.Sensor> getSensorList() {
        if (sensorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sensor_);
        } else {
          return sensorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public int getSensorCount() {
        if (sensorBuilder_ == null) {
          return sensor_.size();
        } else {
          return sensorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public smilyk.sensor.model.SensorProto.Sensor getSensor(int index) {
        if (sensorBuilder_ == null) {
          return sensor_.get(index);
        } else {
          return sensorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder setSensor(
          int index, smilyk.sensor.model.SensorProto.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.set(index, value);
          onChanged();
        } else {
          sensorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder setSensor(
          int index, smilyk.sensor.model.SensorProto.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.set(index, builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder addSensor(smilyk.sensor.model.SensorProto.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.add(value);
          onChanged();
        } else {
          sensorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder addSensor(
          int index, smilyk.sensor.model.SensorProto.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.add(index, value);
          onChanged();
        } else {
          sensorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder addSensor(
          smilyk.sensor.model.SensorProto.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.add(builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder addSensor(
          int index, smilyk.sensor.model.SensorProto.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.add(index, builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder addAllSensor(
          java.lang.Iterable<? extends smilyk.sensor.model.SensorProto.Sensor> values) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sensor_);
          onChanged();
        } else {
          sensorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder clearSensor() {
        if (sensorBuilder_ == null) {
          sensor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          sensorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public Builder removeSensor(int index) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.remove(index);
          onChanged();
        } else {
          sensorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public smilyk.sensor.model.SensorProto.Sensor.Builder getSensorBuilder(
          int index) {
        return getSensorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public smilyk.sensor.model.SensorProto.SensorOrBuilder getSensorOrBuilder(
          int index) {
        if (sensorBuilder_ == null) {
          return sensor_.get(index);  } else {
          return sensorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public java.util.List<? extends smilyk.sensor.model.SensorProto.SensorOrBuilder> 
           getSensorOrBuilderList() {
        if (sensorBuilder_ != null) {
          return sensorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sensor_);
        }
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public smilyk.sensor.model.SensorProto.Sensor.Builder addSensorBuilder() {
        return getSensorFieldBuilder().addBuilder(
            smilyk.sensor.model.SensorProto.Sensor.getDefaultInstance());
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public smilyk.sensor.model.SensorProto.Sensor.Builder addSensorBuilder(
          int index) {
        return getSensorFieldBuilder().addBuilder(
            index, smilyk.sensor.model.SensorProto.Sensor.getDefaultInstance());
      }
      /**
       * <code>repeated .model.Sensor sensor = 1;</code>
       */
      public java.util.List<smilyk.sensor.model.SensorProto.Sensor.Builder> 
           getSensorBuilderList() {
        return getSensorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          smilyk.sensor.model.SensorProto.Sensor, smilyk.sensor.model.SensorProto.Sensor.Builder, smilyk.sensor.model.SensorProto.SensorOrBuilder> 
          getSensorFieldBuilder() {
        if (sensorBuilder_ == null) {
          sensorBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              smilyk.sensor.model.SensorProto.Sensor, smilyk.sensor.model.SensorProto.Sensor.Builder, smilyk.sensor.model.SensorProto.SensorOrBuilder>(
                  sensor_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          sensor_ = null;
        }
        return sensorBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:model.Sensors)
    }

    // @@protoc_insertion_point(class_scope:model.Sensors)
    private static final smilyk.sensor.model.SensorProto.Sensors DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smilyk.sensor.model.SensorProto.Sensors();
    }

    public static smilyk.sensor.model.SensorProto.Sensors getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sensors>
        PARSER = new com.google.protobuf.AbstractParser<Sensors>() {
      @java.lang.Override
      public Sensors parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sensors(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sensors> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sensors> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smilyk.sensor.model.SensorProto.Sensors getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SensorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:model.Sensor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 id = 1;</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>int64 timestamp = 2;</code>
     * @return The timestamp.
     */
    long getTimestamp();

    /**
     * <code>int32 data = 3;</code>
     * @return The data.
     */
    int getData();
  }
  /**
   * Protobuf type {@code model.Sensor}
   */
  public static final class Sensor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:model.Sensor)
      SensorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sensor.newBuilder() to construct.
    private Sensor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sensor() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Sensor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              id_ = input.readInt32();
              break;
            }
            case 16: {

              timestamp_ = input.readInt64();
              break;
            }
            case 24: {

              data_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return smilyk.sensor.model.SensorProto.internal_static_model_Sensor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return smilyk.sensor.model.SensorProto.internal_static_model_Sensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              smilyk.sensor.model.SensorProto.Sensor.class, smilyk.sensor.model.SensorProto.Sensor.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>int32 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private long timestamp_;
    /**
     * <code>int64 timestamp = 2;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int DATA_FIELD_NUMBER = 3;
    private int data_;
    /**
     * <code>int32 data = 3;</code>
     * @return The data.
     */
    @java.lang.Override
    public int getData() {
      return data_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0) {
        output.writeInt32(1, id_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(2, timestamp_);
      }
      if (data_ != 0) {
        output.writeInt32(3, data_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, timestamp_);
      }
      if (data_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, data_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof smilyk.sensor.model.SensorProto.Sensor)) {
        return super.equals(obj);
      }
      smilyk.sensor.model.SensorProto.Sensor other = (smilyk.sensor.model.SensorProto.Sensor) obj;

      if (getId()
          != other.getId()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (getData()
          != other.getData()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static smilyk.sensor.model.SensorProto.Sensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(smilyk.sensor.model.SensorProto.Sensor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code model.Sensor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:model.Sensor)
        smilyk.sensor.model.SensorProto.SensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                smilyk.sensor.model.SensorProto.Sensor.class, smilyk.sensor.model.SensorProto.Sensor.Builder.class);
      }

      // Construct using smilyk.sensor.model.SensorProto.Sensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = 0;

        timestamp_ = 0L;

        data_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return smilyk.sensor.model.SensorProto.internal_static_model_Sensor_descriptor;
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensor getDefaultInstanceForType() {
        return smilyk.sensor.model.SensorProto.Sensor.getDefaultInstance();
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensor build() {
        smilyk.sensor.model.SensorProto.Sensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public smilyk.sensor.model.SensorProto.Sensor buildPartial() {
        smilyk.sensor.model.SensorProto.Sensor result = new smilyk.sensor.model.SensorProto.Sensor(this);
        result.id_ = id_;
        result.timestamp_ = timestamp_;
        result.data_ = data_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof smilyk.sensor.model.SensorProto.Sensor) {
          return mergeFrom((smilyk.sensor.model.SensorProto.Sensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(smilyk.sensor.model.SensorProto.Sensor other) {
        if (other == smilyk.sensor.model.SensorProto.Sensor.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getData() != 0) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        smilyk.sensor.model.SensorProto.Sensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (smilyk.sensor.model.SensorProto.Sensor) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int id_ ;
      /**
       * <code>int32 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <code>int32 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }

      private long timestamp_ ;
      /**
       * <code>int64 timestamp = 2;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>int64 timestamp = 2;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 timestamp = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private int data_ ;
      /**
       * <code>int32 data = 3;</code>
       * @return The data.
       */
      @java.lang.Override
      public int getData() {
        return data_;
      }
      /**
       * <code>int32 data = 3;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(int value) {
        
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 data = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        
        data_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:model.Sensor)
    }

    // @@protoc_insertion_point(class_scope:model.Sensor)
    private static final smilyk.sensor.model.SensorProto.Sensor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new smilyk.sensor.model.SensorProto.Sensor();
    }

    public static smilyk.sensor.model.SensorProto.Sensor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Sensor>
        PARSER = new com.google.protobuf.AbstractParser<Sensor>() {
      @java.lang.Override
      public Sensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sensor(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sensor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sensor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public smilyk.sensor.model.SensorProto.Sensor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_model_Sensors_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_model_Sensors_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_model_Sensor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_model_Sensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014sensor.proto\022\005model\"(\n\007Sensors\022\035\n\006sens" +
      "or\030\001 \003(\0132\r.model.Sensor\"5\n\006Sensor\022\n\n\002id\030" +
      "\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003\022\014\n\004data\030\003 \001(\005B\"" +
      "\n\023smilyk.sensor.modelB\013SensorProtob\006prot" +
      "o3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_model_Sensors_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_model_Sensors_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_model_Sensors_descriptor,
        new java.lang.String[] { "Sensor", });
    internal_static_model_Sensor_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_model_Sensor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_model_Sensor_descriptor,
        new java.lang.String[] { "Id", "Timestamp", "Data", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
